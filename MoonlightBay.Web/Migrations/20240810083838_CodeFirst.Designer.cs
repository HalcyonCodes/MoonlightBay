// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoonlightBay.Data;

#nullable disable

namespace MoonlightBay.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240810083838_CodeFirst")]
    partial class CodeFirst
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MoonlightBay.Model.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("MoonlightBay.Model.Order", b =>
                {
                    b.Property<Guid?>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("OrderChannelID")
                        .HasColumnType("char(36)");

                    b.Property<int?>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int?>("OrderServiceID")
                        .HasColumnType("int");

                    b.Property<Guid?>("SourceTerminalTerminalID")
                        .HasColumnType("char(36)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TargetTerminalTerminalID")
                        .HasColumnType("char(36)");

                    b.HasKey("OrderID");

                    b.HasIndex("OrderChannelID");

                    b.HasIndex("OrderServiceID");

                    b.HasIndex("SourceTerminalTerminalID");

                    b.HasIndex("TargetTerminalTerminalID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MoonlightBay.Model.OrderChannel", b =>
                {
                    b.Property<Guid?>("OrderChannelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int?>("OrderChannelLevel")
                        .HasColumnType("int");

                    b.Property<Guid?>("TerminalID")
                        .HasColumnType("char(36)");

                    b.HasKey("OrderChannelID");

                    b.HasIndex("TerminalID");

                    b.ToTable("OrderChannels");
                });

            modelBuilder.Entity("MoonlightBay.Model.OrderService", b =>
                {
                    b.Property<int?>("OrderServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderServiceDesc")
                        .HasColumnType("longtext");

                    b.Property<string>("OrderServiceName")
                        .HasColumnType("longtext");

                    b.Property<int?>("WorkScriptOrderServiceScriptID")
                        .HasColumnType("int");

                    b.HasKey("OrderServiceID");

                    b.HasIndex("WorkScriptOrderServiceScriptID");

                    b.ToTable("OrderServices");
                });

            modelBuilder.Entity("MoonlightBay.Model.OrderServiceResource", b =>
                {
                    b.Property<int?>("OrderServiceResourceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("OrderServiceID")
                        .HasColumnType("int");

                    b.Property<string>("OrderServiceResourceDesc")
                        .HasColumnType("longtext");

                    b.Property<string>("OrderServiceResourceName")
                        .HasColumnType("longtext");

                    b.HasKey("OrderServiceResourceID");

                    b.HasIndex("OrderServiceID");

                    b.ToTable("OrderServiceResources");
                });

            modelBuilder.Entity("MoonlightBay.Model.OrderServiceResourceClass", b =>
                {
                    b.Property<Guid?>("OrderServiceResoourceClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("OrderID")
                        .HasColumnType("char(36)");

                    b.Property<int?>("OrderServiceResourceID")
                        .HasColumnType("int");

                    b.Property<double?>("ResourceDoubleValue")
                        .HasColumnType("double");

                    b.Property<int?>("ResourceIntValue")
                        .HasColumnType("int");

                    b.Property<string>("ResourceStringValue")
                        .HasColumnType("longtext");

                    b.HasKey("OrderServiceResoourceClassID");

                    b.HasIndex("OrderID");

                    b.HasIndex("OrderServiceResourceID");

                    b.ToTable("OrderServiceResourceClasses");
                });

            modelBuilder.Entity("MoonlightBay.Model.OrderServiceScript", b =>
                {
                    b.Property<int?>("OrderServiceScriptID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderServiceDesc")
                        .HasColumnType("longtext");

                    b.Property<string>("OrderServiceScriptName")
                        .HasColumnType("longtext");

                    b.HasKey("OrderServiceScriptID");

                    b.ToTable("OrderServiceScripts");
                });

            modelBuilder.Entity("MoonlightBay.Model.Terminal", b =>
                {
                    b.Property<Guid?>("TerminalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("MechineID")
                        .HasColumnType("longtext");

                    b.Property<string>("TerminalIP")
                        .HasColumnType("longtext");

                    b.Property<string>("TerminalName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("TerminalID");

                    b.HasIndex("UserId");

                    b.ToTable("Terminals");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoonlightBay.Model.Order", b =>
                {
                    b.HasOne("MoonlightBay.Model.OrderChannel", null)
                        .WithMany("Orders")
                        .HasForeignKey("OrderChannelID");

                    b.HasOne("MoonlightBay.Model.OrderService", "OrderService")
                        .WithMany()
                        .HasForeignKey("OrderServiceID");

                    b.HasOne("MoonlightBay.Model.Terminal", "SourceTerminal")
                        .WithMany()
                        .HasForeignKey("SourceTerminalTerminalID");

                    b.HasOne("MoonlightBay.Model.Terminal", "TargetTerminal")
                        .WithMany()
                        .HasForeignKey("TargetTerminalTerminalID");

                    b.Navigation("OrderService");

                    b.Navigation("SourceTerminal");

                    b.Navigation("TargetTerminal");
                });

            modelBuilder.Entity("MoonlightBay.Model.OrderChannel", b =>
                {
                    b.HasOne("MoonlightBay.Model.Terminal", null)
                        .WithMany("OrderChannels")
                        .HasForeignKey("TerminalID");
                });

            modelBuilder.Entity("MoonlightBay.Model.OrderService", b =>
                {
                    b.HasOne("MoonlightBay.Model.OrderServiceScript", "WorkScript")
                        .WithMany()
                        .HasForeignKey("WorkScriptOrderServiceScriptID");

                    b.Navigation("WorkScript");
                });

            modelBuilder.Entity("MoonlightBay.Model.OrderServiceResource", b =>
                {
                    b.HasOne("MoonlightBay.Model.OrderService", null)
                        .WithMany("OrderServiceResources")
                        .HasForeignKey("OrderServiceID");
                });

            modelBuilder.Entity("MoonlightBay.Model.OrderServiceResourceClass", b =>
                {
                    b.HasOne("MoonlightBay.Model.Order", null)
                        .WithMany("OrderResources")
                        .HasForeignKey("OrderID");

                    b.HasOne("MoonlightBay.Model.OrderServiceResource", "OrderServiceResource")
                        .WithMany()
                        .HasForeignKey("OrderServiceResourceID");

                    b.Navigation("OrderServiceResource");
                });

            modelBuilder.Entity("MoonlightBay.Model.Terminal", b =>
                {
                    b.HasOne("MoonlightBay.Model.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoonlightBay.Model.Order", b =>
                {
                    b.Navigation("OrderResources");
                });

            modelBuilder.Entity("MoonlightBay.Model.OrderChannel", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MoonlightBay.Model.OrderService", b =>
                {
                    b.Navigation("OrderServiceResources");
                });

            modelBuilder.Entity("MoonlightBay.Model.Terminal", b =>
                {
                    b.Navigation("OrderChannels");
                });
#pragma warning restore 612, 618
        }
    }
}
